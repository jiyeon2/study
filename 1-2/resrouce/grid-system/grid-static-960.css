/*static grid system*/


	/*	position:absolute;
	z-index: 10000;
	top: 0;
	left: 50%; 이건 부모 너비의 50%의미
	transform: translateX(-50%);  이건 자기 너비의 50%
absolute는 노말플로우 깨므로 margin left,right auto가 적용안되므로
	*/
/*그리드 컨테이너 모듈 만들기!*/
/*body::before하는 그리드는 일종의 모눈종이인데. 모눈이 안보이면 작업할 수 없으므로 */
body.overlay-grid::after{
	content: '';
	position:absolute;/*모든 요소보다 위에 있어야하니까*/
	min-height:100vh; /*height:100vh도 가능 min-길이가 길때*/
	z-index: 10000;
	top:0;
	left:50%; /*가운데 정렬 위해*/
	transform: translateX(-50%);
}/*컨테이너가 없어도 그리드 보고싶다면 body에 클래스*/

/*컨테이너가 가진 속성을 재사용,공통된 속성 가지고 있는데서 재사용*/
body.overlay-grid::after, .container{
width: 960px;  /*static이므로 px값 고정*/
margin-left: auto;
margin-right: auto;
}

body.overlay-grid::after,
.container.show-grid,
.container.hover-hide-grid{
	background: url("./img/GS-10-60-10.png") repeat;
	/*ress는 no-repeat라 지정해야함 속기형쓸때는 기본이 repeat이므로 따로 안써도 됨*/
}

/*멀티클래스는 두 조건 모두 만족해야 작동하게 하려고. 조건이 안맞으면 작동하여 충돌이 나지 않게!*/
body.hover-hide-grid:hover::after, .container.hover-hide-grid{
	background:none;
}





/*그리드 로우 모듈 (clearfix 유사, 1행을 구성)*/
.row::after{
	content:'';
	display: block;
	clear:both;
}

/*그리드 컬럼 모듈*/
[class*="col-"]{
	float:left;
	margin-right: 10px;
	margin-left: 10px;
}
/*
width: 60*x +(10*2)*(x-1);
cnrl shift y
*/
.col-1{width:60px;}
.col-2{width:140px;}
.col-3{width:220px;}
.col-4{width:300px;}
.col-5{width:380px;}
.col-6{width:460px;}
.col-7{width:540px;}
.col-8{width:620px;}
.col-9{width:700px;}
.col-10{width:780px;}
.col-11{width:860px;}
.col-12{width:940px;}

/* 80px 
column 3/5= 48px, 
gutter 2/5= 32px*/
/*[class*="col-"]{
	float:left;
	margin-right: 16px;
	margin-left: 16px;
}
.col-1{width:48px;}
.col-2{width:128px;}
.col-3{width:208px;}
.col-4{width:288px;}
.col-5{width:368px;}
.col-6{width:448px;}
.col-7{width:528px;}
.col-8{width:608px;}
.col-9{width:688px;}
.col-10{width:768px;}
.col-11{width:848px;}
.col-12{width:928px;}